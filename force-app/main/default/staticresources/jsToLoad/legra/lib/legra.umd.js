!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).legra=e()}(this,(function(){"use strict";const t=[-.06405689286260563,.06405689286260563,-.1911188674736163,.1911188674736163,-.3150426796961634,.3150426796961634,-.4337935076260451,.4337935076260451,-.5454214713888396,.5454214713888396,-.6480936519369755,.6480936519369755,-.7401241915785544,.7401241915785544,-.820001985973903,.820001985973903,-.8864155270044011,.8864155270044011,-.9382745520027328,.9382745520027328,-.9747285559713095,.9747285559713095,-.9951872199970213,.9951872199970213],e=[.12793819534675216,.12793819534675216,.1258374563468283,.1258374563468283,.12167047292780339,.12167047292780339,.1155056680537256,.1155056680537256,.10744427011596563,.10744427011596563,.09761865210411388,.09761865210411388,.08619016153195327,.08619016153195327,.0733464814110803,.0733464814110803,.05929858491543678,.05929858491543678,.04427743881741981,.04427743881741981,.028531388628933663,.028531388628933663,.0123412297999872,.0123412297999872];function n(t,e){const n=e(t),i=n[0]*n[0]+n[1]*n[1];return Math.sqrt(i)}class i{constructor(t,e,n,i){this.points=[],this.dpoints=[],this._lut=[],this.order=3,this.points.push(t,e,n),i&&this.points.push(i),this.order=this.points.length-1,this.update()}update(){this._lut=[],this.dpoints=function(t){const e=[];for(let n=t,i=n.length,o=i-1;i>1;i--,o--){const t=[];let i=[0,0];for(let e=0;e<o;e++)i=[o*(n[e+1][0]-n[e][0]),o*(n[e+1][1]-n[e][1])],t.push(i);e.push(t),n=t}return e}(this.points)}length(){return function(i){let o=0;const s=t.length;for(let h=0;h<s;h++){const s=.5*t[h]+.5;o+=e[h]*n(s,i)}return.5*o}(this.derivative.bind(this))}derivative(t){const e=1-t;let n=0,i=0,o=0,s=this.dpoints[0];return 2===this.order?(s=[s[0],s[1],[0,0]],n=e,i=t):3===this.order&&(n=e*e,i=e*t*2,o=t*t),[n*s[0][0]+i*s[1][0]+o*s[2][0],n*s[0][1]+i*s[1][1]+o*s[2][1]]}getLUT(t=100){if(!t)return[];if(this._lut.length===t)return this._lut;this._lut=[],t--;for(let e=0;e<=t;e++)this._lut.push(this.compute(e/t));return this._lut}compute(t){return function(t,e){if(0===t)return e[0];const n=e.length-1;if(1===t)return e[n];let i=e;const o=1-t;if(0===n)return e[0];if(1===n){return[o*i[0][0]+t*i[1][0],o*i[0][1]+t*i[1][1]]}if(n<4){const e=o*o,s=t*t;let h=0,r=0,l=0,a=0;return 2===n?(i=[i[0],i[1],i[2],[0,0]],r=e,l=o*t*2,a=s):3===n&&(r=e*o,l=e*t*3,a=o*s*3,h=t*s),[r*i[0][0]+l*i[1][0]+a*i[2][0]+h*i[3][0],r*i[0][1]+l*i[1][1]+a*i[2][1]+h*i[3][1]]}const s=JSON.parse(JSON.stringify(e));for(;s.length>1;){for(let e=0;e<s.length-1;e++)s[e]=[s[e][0]+(s[e+1][0]-s[e][0])*t,s[e][1]+(s[e+1][1]-s[e][1])*t];s.splice(s.length-1,1)}return s[0]}(t,this.points)}}const o=new Map;function s(t,e,n,i){const{brickSize:s,color:h}=i;t.save(),t.fillStyle=h,t.shadowColor="rgba(0,0,0,0.5)",t.shadowBlur=3,t.shadowOffsetX=1,t.shadowOffsetY=1,t.beginPath(),t.rect(e,n,s,s),t.fill(),t.beginPath(),t.arc(e+s/2,n+s/2,function(t){if(o.has(t))return o.get(t);const e=Math.min(24,.5*t/2);return o.set(t,e),e}(s),0,2*Math.PI),t.fill(),t.restore()}function h(t,e,n,i){const o=i.brickSize;s(n,t*o,e*o,i)}function r(t,e,n,i=!1){i&&t.sort((t,e)=>t[0]===e[0]?t[1]<e[1]?-1:t[1]>e[1]?1:0:t[0]<e[0]?-1:t[0]>e[0]?1:0);const o=n.brickSize;t.forEach(t=>{s(e,t[0]*o,t[1]*o,n)})}function l(t,e,n,i,o=new Set){const s=[],h=t=>{const e=t.join(",");o.has(e)||(o.add(e),s.push(t))};if(t===n){const n=Math.min(e,i),o=Math.max(e,i);for(let e=n;e<=o;e++)h([t,e])}else{const o=i-e,s=n-t,r=o/s,l=e-r*t;if(Math.abs(s)>=Math.abs(o)){const e=Math.min(t,n),i=Math.max(t,n);for(let t=e;t<=i;t++){h([t,Math.round(r*t+l)])}}else{const t=Math.min(e,i),n=Math.max(e,i);for(let e=t;e<=n;e++){h([Math.round((e-l)/r),e])}}}return s}function a(t,e=new Set){let n=[];for(let i=0;i<t.length-1;i++){const[o,s]=t[i],[h,r]=t[i+1],a=l(o,s,h,r,e);n=[...n,...a]}return n}function c(t,e,n,i,o,s,r=!1){if(s.filled||r)for(let r=0;r<n;r++)for(let n=0;n<i;n++)h(t+r,e+n,o,s);else n>0&&i>0&&u([[t,e],[t+n-1,e],[t+n-1,e+i-1],[t,e+i-1],[t,e]],o,s)}function f(t,e,n,i,o,s){r(l(t,e,n,i),o,s)}function u(t,e,n){r(a(t),e,n,!0)}function d(t,e,n,i,o,s){let h=0,l=i;const a=n*n,f=i*i,u=-(a/4+n%2+f),d=-(f/4+i%2+a),p=-(f/4+i%2);let g=-a*l,x=2*f*h,M=-2*a*l;const m=2*f,y=2*a,b=()=>{h++,g+=x+=m},w=()=>{l--,g+=M+=y};if(s.filled){const r=[];let x=h,M=l,m=1,y=1;const S=(t,e,n,i)=>{i<0&&(e+=i+1,i=Math.abs(i)),r.push({x:t,y:e,width:n,height:i})};if(0===i)S(t-1,e,2*n+1,1);else{for(;l>=0&&h<=n;)g+f*h<=u||g+a*l<=p?(1===y||(2*M+1>2*(y-1)?(S(t-x,e-M,m,y-1),S(t-x,e+M,m,1-y),M-=y-1,y=1):(S(t-x,e-M,m,2*M+1),M-=M,y=1)),b(),x++,m+=2):g-a*l>d?(w(),y++):(2*M+1>2*y?(S(t-x,e-M,m,y),S(t-x,e+M,m,-y)):S(t-x,e-M,m,2*M+1),b(),w(),x++,m+=2,M-=y,y=1);M>y?(S(t-x,e-M,m,y),S(t-x,e+M+1,m,-y)):S(t-x,e-M,m,2*M+1)}r.forEach(t=>{t.height<0&&(t.y+=t.height+1,t.height=Math.abs(t.height))}),r.sort((t,e)=>t.y-e.y),r.forEach(t=>c(t.x,t.y,t.width,t.height,o,s,!0))}else{const i=[];for(;l>=0&&h<=n;)i.push([t+h,e+l]),0===h&&0===l||i.push([t-h,e-l]),0!==h&&0!==l&&(i.push([t+h,e-l]),i.push([t-h,e+l])),g+f*h<=u||g+a*l<=p?b():g-a*l>d?w():(b(),w());r(i,o,s,!0)}}function p(t,e,n){if(0===t.length)return;if(1===t.length)return void h(t[0][0],t[0][1],e,n);if(2===t.length){const[[i,o],[s,h]]=t;return void f(i,o,s,h,e,n)}const i=[...t];if(i[0].join(",")!==i[i.length-1].join(",")&&i.push([i[0][0],i[0][1]]),n.filled){const t=new Set;let o=a(i,t);const s=[];for(let t=0;t<i.length-1;t++){const e=i[t],n=i[t+1];if(e[1]!==n[1]){const t=Math.min(e[1],n[1]);s.push({ymin:t,ymax:Math.max(e[1],n[1]),x:t===e[1]?e[0]:n[0],islope:(n[0]-e[0])/(n[1]-e[1])})}}s.sort((t,e)=>t.ymin<e.ymin?-1:t.ymin>e.ymin?1:t.x<e.x?-1:t.x>e.x?1:t.ymax===e.ymax?0:(t.ymax-e.ymax)/Math.abs(t.ymax-e.ymax));let h=[],c=s[0].ymin;for(;h.length||s.length;){if(s.length){let t=-1;for(let e=0;e<s.length&&!(s[e].ymin>c);e++)t=e;s.splice(0,t+1).forEach(t=>{h.push({s:c,edge:t})})}if((h=h.filter(t=>t.edge.ymax!==c)).sort((t,e)=>t.edge.x===e.edge.x?0:(t.edge.x-e.edge.x)/Math.abs(t.edge.x-e.edge.x)),h.length>1)for(let e=0;e<h.length;e+=2){const n=e+1;if(n>=h.length)break;const i=h[e].edge,s=h[n].edge;o=o.concat(l(Math.round(i.x),c,Math.round(s.x),c,t))}c++,h.forEach(t=>{t.edge.x=t.edge.x+t.edge.islope})}r(o,e,n,!0)}else u(i,e,n)}return class{constructor(t,e=24,n){this.defaultOptions={brickSize:24,color:"#2196F3",filled:!1},this.ctx=t,this.defaultOptions.brickSize=e,n&&(n.color&&(this.defaultOptions.color=n.color),"boolean"==typeof n.filled&&(this.defaultOptions.filled=n.filled))}opt(t){return t?Object.assign({},this.defaultOptions,t):this.defaultOptions}line(t,e,n,i,o){f(t,e,n,i,this.ctx,this.opt(o))}linearPath(t,e){u(t,this.ctx,this.opt(e))}rectangle(t,e,n,i,o){c(t,e,n,i,this.ctx,this.opt(o))}circle(t,e,n,i){!function(t,e,n,i,o){d(t,e,n,n,i,o)}(t,e,n,this.ctx,this.opt(i))}ellipse(t,e,n,i,o){d(t,e,n,i,this.ctx,this.opt(o))}polygon(t,e){p(t,this.ctx,this.opt(e))}arc(t,e,n,i,o,s,h,r){!function(t,e,n,i,o,s,h,r,l){let a=Math.min(o,s),c=Math.max(o,s);if(a===c)return;if(n<=0||i<=0)return;c-a>2*Math.PI&&(a=0,c=2*Math.PI);const f=Math.round(2*Math.sqrt((n*n+i*i)/2)*(c-a)),d=(c-a)/f,g=new Set,x=[];for(let o=0;o<=f;o++){const s=a+o*d,h=Math.cos(s),r=Math.sin(s),l=n*i/Math.sqrt(i*i*h*h+n*n*r*r),c=[t+Math.round(l*h),e+Math.round(l*r)],f=c.join(",");g.has(f)||(g.add(f),x.push(c))}if(h){const n=[t,e],i=n.join(",");g.has(i)||(g.add(i),x.push(n)),p(x,r,l)}else u(x,r,l)}(t,e,n,i,o,s,h,this.ctx,this.opt(r))}bezierCurve(t,e,n,o,s,h,r,l,a){!function(t,e,n,o,s,h,r,l,a,c){const f=new i([t,e],[n,o],[s,h],[r,l]),d=f.getLUT(f.length()).map(t=>[Math.round(t[0]),Math.round(t[1])]);d.push([r,l]),c.filled?p(d,a,c):u(d,a,c)}(t,e,n,o,s,h,r,l,this.ctx,this.opt(a))}quadraticCurve(t,e,n,o,s,h,r){!function(t,e,n,o,s,h,r,l){const a=new i([t,e],[n,o],[s,h]),c=a.getLUT(a.length()).map(t=>[Math.round(t[0]),Math.round(t[1])]);c.push([s,h]),l.filled?p(c,r,l):u(c,r,l)}(t,e,n,o,s,h,this.ctx,this.opt(r))}drawImage(t,e,n,i,o){!function(t,e,n,i,o,s,r){const l=e.brickSize;s||(s=[0,0]),r||(r=[n.width,n.height]),o||(o=[Math.round(r[0]/l),Math.round(r[1]/l)]);const[a,c]=o,f="undefined"!=typeof OffscreenCanvas?new OffscreenCanvas(a,c):document.createElement("canvas");f.width=a,f.height=c;const u=f.getContext("2d");u.drawImage(n,s[0],s[1],r[0],r[1],0,0,o[0],o[1]);const d=u.getImageData(0,0,a,c);for(let e=0;e<c;e++)for(let n=0;n<a;n++){const o={brickSize:l,color:`rgb(${d.data[e*a*4+4*n]}, ${d.data[e*a*4+4*n+1]}, ${d.data[e*a*4+4*n+2]})`,filled:!1};h(i[0]+n,i[1]+e,t,o)}}(this.ctx,this.opt(),t,e,n,i,o)}}}));
